using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Data;
//using System.Web.Mvc;
using System.IO;
using System.Text;

using System.Runtime.Serialization;

using Wcss;
using DDay.iCal;
using DDay.iCal.Serialization.iCalendar;

namespace wctMain.Controller.Api
{
    /// <summary>
    /// SUMMARY: Headliner @ Venue
    /// DESCRIPTION: Date, Acts @ Venue
    /// EVENT START: universal time
    /// </summary>
    public class iCalController : ApiController
    {
        iCalendar ical;

        // GET api/<controller>/<query>
        public HttpResponseMessage Get(string calItemLink)
        {
            //http://stackoverflow.com/questions/12145390/how-to-set-downloading-file-name-in-asp-net-mvc-web-api
            //see utils.fileloader.

            //see showView for logic
            MainContext ctx = new MainContext();            
            iCalendarSerializer serializer = new iCalendarSerializer();

            if (calItemLink.ToLower().IndexOf("mailershow") == -1)
            {
                Show s = ctx.GetCurrentShowByUrl(calItemLink, false);

                if (s != null)
                {
                    CreateCalendarIcs(s);
                    string filename = string.Format("{0}_{1}.ics", s.FirstShowDate.DateOfShow_ToSortBy.ToString("yyyyMMdd"), s.GetShowEventPart);
                    Utils.FileLoader.WriteDownloadToContext(serializer.SerializeToString(ical), string.Format("Filename={0}", filename));

                    var response = Request.CreateResponse(HttpStatusCode.OK);
                    return response;
                }
            }
            else //try to find an exiting entry
            {
                string query = Request.RequestUri.Query.TrimStart(new char[] { '?' });
                string[] pieces = query.Split(new char[] { '&' });
                string url = null;
                foreach (string p in pieces)
                {
                    string[] parts = p.Split(new char[] { '=' });
                    if (parts.Length == 2 && parts[0] == "mlrshow")
                    {
                        url = parts[1];
                        break;
                    }
                }

                if (url != null)
                {
                    Wcss.ICalendar ICAL = new Wcss.ICalendar("UrlKey", url);
                    if (ICAL != null && ICAL.Id >= 10000)
                    {
                        string filename = string.Format("{0}.ics",
                            ICAL.UrlKey.ToLower().Replace("https://", string.Empty).Replace("http://", string.Empty).Replace("/", "_"));

                        Utils.FileLoader.WriteDownloadToContext(ICAL.SerializedCalendar, string.Format("Filename={0}", filename));

                        var response = Request.CreateResponse(HttpStatusCode.OK);
                        return response;
                    }
                }
            }

            var responseNotFound = Request.CreateResponse(HttpStatusCode.NotFound);
            responseNotFound.Headers.Location = new Uri(string.Format("{0}://{1}/Error.aspx",
                this.Request.RequestUri.Scheme, this.Request.RequestUri.Host));
            return responseNotFound;
        }

        public HttpResponseMessage Get()
        {
            var responseNotFound = Request.CreateResponse(HttpStatusCode.NotFound);
            responseNotFound.Headers.Location = new Uri(string.Format("{0}://{1}/Error.aspx",
                this.Request.RequestUri.Scheme, this.Request.RequestUri.Host));
            return responseNotFound;
        }

        /// <summary>
        /// Created when mailershow is imported
        /// </summary>
        /// <param name="ms"></param>
        public static void CreateCalendarIcs(MailerShow ms)
        {
            DateTime startTime = Utils.ParseHelper.JavascriptDate_To_DateTime(ms.SortDate);
            string _acts = string.Format("{0} {1}", ms.Headliner, ms.Opener).Trim();
            string _dateVenue = string.Format("{0} @ {1}",
                startTime.ToString("MMM dd, yyyy"), ms.Venue).ToUpper();

            StringBuilder sb = new StringBuilder();
            sb.AppendLine(_dateVenue);
            sb.AppendLine(_acts);


            //create a calendar
            iCalendar cal = new iCalendar();
            cal.Name = "VCALENDAR";
            cal.Method = "PUBLISH";
            cal.Version = "2.0";
            cal.AddLocalTimeZone();

            Event evt = cal.Create<Event>();
            evt.UID = ms.SiteUrl;
            evt.Url = new Uri(ms.SiteUrl);
            evt.Location = Utils.ParseHelper.DoubleSpaceToSingle(ms.Venue.Replace("-", " ").Replace(",", " ")).Trim().ToUpper();
            evt.Start = (iCalDateTime)startTime.ToUniversalTime();
            evt.End = (iCalDateTime)startTime.AddHours(5).ToUniversalTime();
            evt.Description = Utils.ParseHelper.DoubleSpaceToSingle(sb.ToString().Replace("-", " "));            
            evt.Summary = Utils.ParseHelper.DoubleSpaceToSingle(string.Format("{0} @ {1}",
                ms.Headliner,
                ms.Venue.Replace("-", " ")));
            

            //determine if we have an existing entry in the db and save
            Wcss.ICalendar ICAL = new Wcss.ICalendar("UrlKey", ms.SiteUrl);

            if (ICAL == null || ICAL.Id < 10000)
            {
                ICAL = new Wcss.ICalendar();
                ICAL.UrlKey = ms.SiteUrl;
            }

            iCalendarSerializer serializer = new iCalendarSerializer();
            ICAL.SerializedCalendar = serializer.SerializeToString(cal);

            ICAL.Save();
        }

        /*** Internal Methods ***/
        private void CreateCalendarIcs(Show _show)
        {
            ShowDate sd = _show.FirstShowDate;
            string _subject = _show.Display.DisplaySocial_Subject.ToUpper();
            string _showDescription = _show.Display.DisplaySocial_Description;
                
                
                //string.Format("{0} @ {1}{2}{3}",
                //_show.Display.DisplaySocial_Date, _show.Display.DisplaySocial_Venue,
                //Environment.NewLine,
                //_show.Display.DisplaySocial_Acts
                //);                

            string uid = string.Format("{0} @{1}-{2}", 
                _subject, 
                _show.Id.ToString(),
                sd.Id.ToString());

            ical = new iCalendar();
            ical.Name = "VCALENDAR";
            ical.Method = "PUBLISH";
            ical.Version = "2.0";
            //ical.AddProperty("X-WR-CALNAME", uid);
            //ical.AddProperty("", string.Empty);
            //ical.ProductID = _show.FirstShowDate.ConfiguredUrl;
            //ical.AddLocalTimeZone();
                        
            Event evt = ical.Create<Event>();            
            evt.UID = uid;

            DateTime startTime = sd.DateOfShow_ToSortBy;
            DateTime endTime = sd.DateOfShow_ToSortBy.AddHours(5);
                       
            //adjust for late night shows - 
            //if (endTime.Date > startTime.Date)
            //    endTime = startTime.Date.AddHours(24);

            evt.Start = (iCalDateTime)startTime.ToUniversalTime();
            evt.End = (iCalDateTime)endTime.ToUniversalTime();
            //evt.IsAllDay = true; -don't use

            evt.Description =
                string.Format("{0}\\r\\n{1}\\r\\n{2}\\r\\n\\r\\n{3}", //keep \\r\\n - as per spec                
                Utils.ParseHelper.DoubleSpaceToSingle(RemoveCommas(_show.Display.DisplaySocial_DateAndVenue)),
                Utils.ParseHelper.DoubleSpaceToSingle(RemoveCommas(_show.Display.DisplaySocial_Acts)),
                string.Format("http://{0}/{1}", _Config._DomainName, _show.FirstShowDate.ConfiguredUrl),
                "*** end time is subject to change ***");
            evt.Summary = Utils.ParseHelper.DoubleSpaceToSingle(RemoveCommas(_subject)).Trim();
            evt.Url = new Uri(string.Format("http://{0}/{1}", _Config._DomainName, _show.FirstShowDate.ConfiguredUrl));
            evt.Location = Utils.ParseHelper.DoubleSpaceToSingle(RemoveCommas(_show.DisplayVenueName.Replace("-", " "))).Trim().ToUpper();
            
            //outlook does not like the recurrence pattern
            //RecurrencePattern rp = new RecurrencePattern(FrequencyType.None);
            //evt.RecurrenceRules.Add(rp);
        }

        private string RemoveCommas(string str)
        {
            return str.Replace(",", " ");
        }
    }
}